/* ========= ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ========= */
const API_URL = "/api/menus";
const FALLBACK_IMG = "/background/food.jpg";

/* ========= DOM ========= */
const listEl  = document.getElementById("menuList");
const catWrap = document.getElementById("catScroller");
const stateEl = document.getElementById("state");

/* ========= State ========= */
let ALL = [];
let GROUPS = {};
let ACTIVE_CAT = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";

/* ========= View Track (‡∏Å‡∏±‡∏ô‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏ï‡πà‡∏≠ session) ========= */
const VIEW_STORAGE_KEY = "ffg_menu_viewed_ids_v1";
const VIEWED_SET = loadViewedSet();

function loadViewedSet() {
  try {
    const raw = sessionStorage.getItem(VIEW_STORAGE_KEY);
    const arr = raw ? JSON.parse(raw) : [];
    return new Set(Array.isArray(arr) ? arr : []);
  } catch { return new Set(); }
}
function markViewed(id) {
  if (!id) return;
  VIEWED_SET.add(id);
  try {
    sessionStorage.setItem(VIEW_STORAGE_KEY, JSON.stringify([...VIEWED_SET]));
  } catch {}
}
function hasViewed(id) {
  return VIEWED_SET.has(id);
}

/* ========= Utils ========= */
// ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á category ‡πÅ‡∏•‡∏∞ type)
function groupByCategory(items) {
  const map = {};
  for (const m of items) {
    const cat = (m.category || m.type || "‡∏≠‡∏∑‡πà‡∏ô‡πÜ").toString().trim();
    (map[cat] ||= []).push(m);
  }
  return map;
}

/* ---- ‡∏´‡∏≤ restaurant id/slug ‡∏à‡∏≤‡∏Å‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏ô‡∏π ---- */
function getRestaurantKey(m) {
  if (!m || typeof m !== "object") return null;

  const direct =
    m.restaurantId ||
    m.shopId ||
    m.shop_id ||
    m.restaurant_id;

  if (direct) return direct;

  const r = m.restaurant || m.shop || {};
  return r._id || r.id || r.slug || null;
}

/* ‡∏î‡∏∂‡∏á _id ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à */
function getMenuId(m) {
  return m?._id || m?.id || null;
}

/* ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (shop.html) ‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡πà‡∏á "id" ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÄ‡∏õ‡πá‡∏ô "menu" */
function gotoDetail(menuObj) {
  const key = getRestaurantKey(menuObj);
  const url = new URL("/Menu/shop.html", location.origin);

  if (key) {
    url.searchParams.set("id", key);
    // ‡πÅ‡∏ô‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤ Shop ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ)
    if (menuObj?._id) url.searchParams.set("menuId", menuObj._id);
    else if (menuObj?.name) url.searchParams.set("menu", menuObj.name);
  } else {
    // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ -> fallback ‡πÄ‡∏î‡∏¥‡∏° (‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏î‡πÇ‡∏°‡πà)
    if (menuObj?.name) url.searchParams.set("menu", menuObj.name);
    console.warn("[menu.js] ‡πÑ‡∏°‡πà‡∏°‡∏µ restaurant id/slug ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ, ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏õ‡∏ó‡∏µ‡πà shop.html");
  }

  window.location.href = url.toString();
}

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡∏ö‡∏≤‡∏ó (THB)
const fmtTHB = new Intl.NumberFormat("th-TH", {
  style: "currency",
  currency: "THB",
  maximumFractionDigits: 0
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏™)
function getPrice(m) {
  if (typeof m?.price === "number") return fmtTHB.format(m.price);
  if (typeof m?.price === "string" && m.price.trim()) return m.price.trim();
  if (m?.price?.min || m?.price?.max) {
    const min = m.price.min ? fmtTHB.format(m.price.min) : null;
    const max = m.price.max ? fmtTHB.format(m.price.max) : null;
    if (min && max) return `${min} - ${max}`;
    if (min) return min;
    if (max) return max;
  }
  return "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏";
}

// ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
function getViews(m) {
  const v = (m?.stats?.views ?? m?.views ?? 0);
  return Number.isFinite(v) ? v : 0;
}

/* ========= Render: ‡∏´‡∏°‡∏ß‡∏î ========= */
function renderCategories(groups) {
  catWrap.innerHTML = "";

  const cats = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", ...Object.keys(groups).sort()];
  for (const cat of cats) {
    const btn = document.createElement("button");
    btn.className = "cat-chip" + (cat === ACTIVE_CAT ? " active" : "");

    // ‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏£‡∏π‡∏õ/‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
    const thumb = document.createElement("div");
    thumb.className = "thumb";
    if (cat === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
      const span = document.createElement("span");
      span.textContent = "üçΩÔ∏è";
      thumb.appendChild(span);
    } else {
      const first = groups[cat]?.[0];
      const img = document.createElement("img");
      img.src = (first && first.image) ? first.image : FALLBACK_IMG;
      img.alt = cat;
      thumb.appendChild(img);
    }

    // ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î
    const label = document.createElement("div");
    label.className = "label";
    label.textContent = cat;

    btn.appendChild(thumb);
    btn.appendChild(label);

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏°‡∏ß‡∏î
    btn.addEventListener("click", () => {
      ACTIVE_CAT = cat;
      renderCategories(groups);
      renderGrid();

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL (deep-link) ‡πÄ‡∏õ‡πá‡∏ô ?cat=<‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î>
      const url = new URL(location.href);
      if (cat === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") url.searchParams.delete("cat");
      else url.searchParams.set("cat", cat);
      history.replaceState(null, "", url.toString());
    });

    catWrap.appendChild(btn);
  }
}

/* ========= ‡∏¢‡∏¥‡∏á‡∏ô‡∏±‡∏ö‡∏ß‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡∏¢‡∏π‡∏ô‡∏µ‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏ú‡∏•‡πà ========= */
async function pingMenuView(menuId, viewsCountEl) {
  try {
    if (!menuId || hasViewed(menuId)) return;
    markViewed(menuId); // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡πÉ‡∏ô session ‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ (optimistic)

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optimistic)
    if (viewsCountEl) {
      const current = parseInt((viewsCountEl.textContent || "0").replace(/[^\d]/g, ""), 10) || 0;
      viewsCountEl.textContent = (current + 1).toLocaleString("th-TH");
    }

    const res = await fetch(`${API_URL}/${menuId}/view`, { method: "POST" });
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö increased=false ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ô‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (duplicate)
    if (res.ok) {
      const data = await res.json().catch(()=>null);
      if (data && data.ok === true && data.increased === false && viewsCountEl) {
        // ‡∏¢‡πâ‡∏≠‡∏ô UI ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ô‡∏±‡∏ö‡πÑ‡∏õ)
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏∞ increased=true ‡πÄ‡∏°‡∏∑‡πà‡∏≠ session ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢
        const current = parseInt((viewsCountEl.textContent || "0").replace(/[^\d]/g, ""), 10) || 0;
        if (current > 0) {
          viewsCountEl.textContent = (current - 1).toLocaleString("th-TH");
        }
      }
    }
  } catch {
    // ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö UX
  }
}

/* ========= Render: ‡∏Å‡∏£‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π ========= */
let intersectionObserver = null;
function ensureObserver() {
  if (intersectionObserver) return intersectionObserver;
  if (!("IntersectionObserver" in window)) return null;

  intersectionObserver = new IntersectionObserver((entries, obs) => {
    entries.forEach(en => {
      if (!en.isIntersecting) return;
      const card = en.target;
      const menuId = card.getAttribute("data-menu-id");
      const viewsCountEl = card.querySelector(".views-count");
      if (menuId) pingMenuView(menuId, viewsCountEl);
      obs.unobserve(card);
    });
  }, { threshold: 0.4 }); // ‡πÇ‡∏ú‡∏•‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ~40%

  return intersectionObserver;
}

function renderGrid() {
  listEl.innerHTML = "";

  const items = (ACTIVE_CAT === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") ? ALL : (GROUPS[ACTIVE_CAT] || []);
  if (items.length === 0) {
    stateEl.textContent = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ";
    return;
  }
  stateEl.textContent = "";

  const io = ensureObserver();

  for (const m of items) {
    const li = document.createElement("li");
    li.className = "card";

    const name = m.name || "-";
    const img  = m.image || FALLBACK_IMG;
    const desc = (m.description || m.review || "");
    const priceText = getPrice(m);
    const viewsText = getViews(m).toLocaleString("th-TH");
    const menuId = getMenuId(m);

    // ‡πÄ‡∏Å‡πá‡∏ö menuId ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡πÇ‡∏ú‡∏•‡πà‡πÑ‡∏î‡πâ
    if (menuId) li.setAttribute("data-menu-id", menuId);

    li.innerHTML = `
      <img src="${img}" alt="${name}" />
      <h3 class="card-title">${name}</h3>
      ${desc ? `<p class="card-desc muted">${desc}</p>` : ""}

      <div class="meta">
        <span class="badge price">${priceText}</span>
        <span class="badge"><i>üëÅ</i> <span class="views-count">${viewsText}</span> ‡∏ß‡∏¥‡∏ß</span>
      </div>

      <button class="content-btn">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</button>
    `;

    // ‡∏Å‡∏î‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    li.querySelector(".content-btn").addEventListener("click", () => gotoDetail(m));

    listEl.appendChild(li);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Observer ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î
    if (io && menuId && !hasViewed(menuId)) {
      io.observe(li);
    } else if (!io && menuId && !hasViewed(menuId)) {
      // ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ IntersectionObserver ‚Üí ‡∏¢‡∏¥‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const viewsCountEl = li.querySelector(".views-count");
      pingMenuView(menuId, viewsCountEl);
    }
  }
}

/* ========= Data ========= */
async function loadMenus() {
  stateEl.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£...";
  try {
    const res = await fetch(API_URL);
    if (!res.ok) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    const data = await res.json();
    stateEl.textContent = "";
    return Array.isArray(data) ? data : [];
  } catch (err) {
    console.error(err);
    stateEl.textContent = "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à";
    return [];
  }
}

/* ========= Init ========= */
(async function init() {
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ?cat=<‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î>
  const url = new URL(location.href);
  ACTIVE_CAT = url.searchParams.get("cat") || "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î";

  ALL = await loadMenus();
  GROUPS = groupByCategory(ALL);

  renderCategories(GROUPS);
  renderGrid();
})();
